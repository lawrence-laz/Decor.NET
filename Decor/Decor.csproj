<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Company>Laurynas Lazauskas</Company>
    <Product>Decor</Product>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Authors>Laurynas Lazauskas</Authors>
    <Description>A simple way to decorate a class with additional functionality using attributes.</Description>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/lawrence-laz/Decor.NET</PackageProjectUrl>
    <PackageTags>decorator dynamic-proxy aspect-oriented-programming</PackageTags>
    <Copyright>Copyright 2020</Copyright>
    <Version>1.2.0</Version>
    <PackageReleaseNotes>Added a CallInfo.SetState(object) and CallInfo.GetState&lt;T&gt;() methods to transfer state between OnBefore and OnAfter methods. Use this to transfer objects like Stopwatch between the methods instead of a class property, as property can be overwritten by another call.</PackageReleaseNotes>
    <RepositoryUrl>https://github.com/lawrence-laz/Decor.NET</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Castle.Core" Version="4.4.0" />
    <PackageReference Include="Castle.Core.AsyncInterceptor" Version="1.7.0" />
  </ItemGroup>

</Project>
